[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "saturdays"
description = "The landing page for the DRA Saturday Sessions"
readme = "README.md"
requires-python = ">=3.10"
version = "0.0.1a1"
authors = [
  { name = "Ugo Nwosu", email = "ugognw@gmail.com" },
  { name = "Ugo Nwosu", email = "ugn@sfu.ca" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: Unix",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
  # 2024-05-03
  "ase>=3.23.0",
  # 2024-07-23
  "numpy>=1.24.2,<2.0.0",
  # 2024-06-10
  "pymatgen>=2024.6.10",
  # 2024-03-18
  "cclib==1.8",
]

[project.optional-dependencies]
test = [
  # 2024-07-20
  "pytest>=8.3.1",
  # 2024-03-24
  "pytest-cov>=5.0.0",
  # 2023-10-03
  "pytest-datadir>=1.5.0",
  # 2024-04-28
  "pytest-xdist>=3.6.1",
]
dev = [
  # 2024-05-10
  "pre-commit>=3.7.0",
]
docs = [
  # 2024-04-20
  "mkdocs>=1.6.0",
  # 2024-07-23
  "mkdocs-material>=9.5.30",
  # 2022-08-1
  "mdx_truly_sane_lists>=1.3",
  # 2022-03-22
  "mkdocs-git-revision-date-plugin>=0.3.2"
]

[project.urls]
Documentation = "https://github.com/ugognw/saturdays/README.md"
PRs = "https://github.com/ugognw/saturdays/pull"
Issues = "https://github.com/ugognw/saturdays/issues"
Source = "https://github.com/ugognw/saturdays"

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.default]
# use "features" until PEP 735 decided upon
# https://discuss.python.org/t/pep-735-dependency-groups-in-pyproject-toml/39233/7
features = ["test", "dev", "docs"]
python = "3.11"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"

[tool.hatch.envs.docs]
features = ["docs"]
detached = true

[tool.hatch.envs.test]
features = ["test"]

[[tool.hatch.envs.test.matrix]]
python = [
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.mypy]
allow_untyped_calls = true

[[tool.mypy.overrides]]
module = "pymatgen"
ignore_missing_imports = true
strict = true

[tool.pytest.ini_options]
addopts = [
  "-n",
  "auto",
  "--import-mode=importlib",
  "-r A",
  "--strict-markers",
  "--doctest-modules",
  "--doctest-glob=*.rst",
  "--tb=short",
]
filterwarnings =[
  "error",
]
markers = [
  "calculator: requires a call to an external calculator (deselect with '-m \"not calculator\"')",
]
norecursedirs = "migrations"
python_files = [
  "test_*.py",
  "*_test.py",
  "tests.py"
]
testpaths = ["tests"]

[tool.ruff]
line-length = 79
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79

[tool.ruff.lint]
ignore = [
    "D203", # pydocstyle one-blank-line-before-class
    "D213", # pydocstyle multi-line-summary-second-line
    "D300", # pydocstyle triple-single-quotes
    "D406", # pydocstyle new-line-after-section-name
    "D100", # pydocstyle undocumented-public-module
    "D407", # pydocstyle dashed-underline-after-section
    "E111", # pycodestyle indentation-with-invalid-multiple
    "E114", # pycodestyle indentation-with-invalid-multiple-comment
    "E117", # pycodestyle over-indented
    "E501", # pycodestyle line-too-long
    "PLR0913", # pylint too-many-arguments
    "Q000", # flake8-quotes bad-quotes-inline-string
    "Q001", # flake8-quotes bad-quotes-multiline-string
    "Q002", # flake8-quotes bad-quotes-docstring
    "Q003", # flake8-quotes avoidable-escaped-quote
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "S603", # flake8-bandit subprocess-without-shell-equals-true
    "W191", # pycodestyle tab-indentation
]
select = [
    "ARG", # flake8-unused-arguments
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe complexity
    "COM818", # flake8-commas trailing-comma-on-bare-tuple
    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "N", # pep8-naming
    "NPY", # NumPy-specific rules
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "YTT", # flake8-2020
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true
force-sort-within-sections = true
split-on-trailing-comma = false
known-first-party = ["welcome_guide"]

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs,tools}/*" = ["E402"]  # allow module-import-not-at-top-of-file
"__init__.py" = ["E402"]  # allow module-import-not-at-top-of-file
"__main__.py" = ["D100"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["D", "PLR2004", "S101", "TID252"]
"conf.py" = [
    "A001",
    "ARG001",
    "D100",
    "PLR2004",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
